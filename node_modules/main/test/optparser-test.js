"use strict";
/* global describe */
/* global it */

var optparser = require('../optparser')
, expect = require('chai').expect;

describe('optparser', function() {

	describe('getSections', function() {

		it('should pull out the OPTIONS section of the markdown', function() {
			var markdown = [
				'# sample -- A demonstration of the features & formatting',
				'',
				'## SYNOPSIS',
				'',
				'sample [flags] `<first>` `<last>` `[pet]`',
				'',
				'## OPTIONS',
				'',
				'### -f, --flag',
				'A simple boolean flag',
				'',
				'## BUGS',
				'',
				'GitHub'
			].join('\n');

			var optionBody = optparser.getSections('OPTIONS', 2, markdown);

			expect(optionBody[0]).to.eql([
				'## OPTIONS',
				'',
				'### -f, --flag',
				'A simple boolean flag',
				''
			].join('\n'));
		});

		it('should pull out the OPTIONS section of the markdown (dashes)', function() {
			var markdown = [
				'sample -- A demonstration of the features & formatting',
				'======================================================',
				'',
				'SYNOPSIS',
				'--------',
				'',
				'sample [flags] `<first>` `<last>` `[pet]`',
				'',
				'OPTIONS',
				'-------',
				'',
				'### -f, --flag',
				'A simple boolean flag',
				'',
				'BUGS',
				'----',
				'',
				'GitHub'
			].join('\n');

			var optionBody = optparser.getSections('OPTIONS', 2, markdown);

			expect(optionBody[0]).to.eql([
				'OPTIONS',
				'-------',
				'',
				'### -f, --flag',
				'A simple boolean flag',
				''
			].join('\n'));
		});

		it('should pull out the flag sections from the OPTIONS section', function() {
			var markdown = [
				'## OPTIONS',
				'',
				'### -f, --flag',
				'A simple boolean flag',
				'',
				'### -s NAME, --string=NAME',
				'',
				'Some sample string.',
				''
			].join('\n');

			var optionBody = optparser.getSections('-.*', 3, markdown);

			expect(optionBody).to.eql([
				[
					'### -f, --flag',
					'A simple boolean flag',
					''
				].join('\n'),
				[
					'### -s NAME, --string=NAME',
					'',
					'Some sample string.',
					''
				].join('\n')
			]);
		});
	});

	describe('parseFlagSection', function() {

		it('should parse boolean flags', function() {
			var section = [
				'### -f, --flag',
				'A simple boolean flag'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				f: {
					alias: 'flag',
					type: 'boolean'
				}
			});
		});

		it('should parse a simple flag', function() {
			var section = [
				'### -s NAME, --simple-flag=NAME',
				'Some description.'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				s: {
					alias: 'simple-flag'
				}
			});
		});

		it('should parse a simple flag (required)', function() {
			var section = [
				'### --simple=s NAME, -s NAME (required)',
				'Some description.'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				simple: {
					required: true,
					alias: 's'
				}
			});
		});

		it('should parse a simple flag (default)', function() {
			var section = [
				'### -s NAME, --simple=NAME (default=John)',
				'Some description.'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				s: {
					default: 'John',
					alias: 'simple'
				}
			});
		});

		it('should parse a simple flag (default, env var)', function() {
			process.env.FOOBAR_node_main = 'test';
			var section = [
				'### -s NAME, --simple=NAME (default=$FOOBAR_node_main)',
				'Some description.'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				s: {
					default: 'test',
					alias: 'simple'
				}
			});
		});

		it('should parse a simple flag (default, env var NOT SET)', function() {
			var section = [
				'### -s NAME, --simple=NAME (default=$FOOBAR_node_main_empty)',
				'Some description.'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				s: {
					alias: 'simple'
				}
			});
		});


		it('should parse a simple flag (default, env var, required)', function() {
			process.env.FOOBAR_node_main = 'test';
			var section = [
				'### -s NAME, --simple=NAME (default=$FOOBAR_node_main, required)',
				'Some description.'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				s: {
					default: 'test',
					required: true,
					alias: 'simple'
				}
			});
		});

		it('should parse a simple flag (force raw string)', function() {
			var section = [
				'### -s "NAME", --simple="NAME"',
				'Some description.'
			].join('\n');

			var parsed = optparser.parseFlagSection(section);

			expect(parsed).to.eql({
				s: {
					alias: 'simple',
					type: 'string'
				}
			});
		});

	});

	describe('getAttributes', function() {
		it('should convert our attributes into minimist format', function() {
			var attributes = optparser.getAttributes({
				aString: {
					alias: 's',
					default: 'foobar',
					type: 'string'
				},
				aBoolean: {
					type: 'boolean'
				},
				isRequired: {
					required: true
				}
			});

			expect(attributes).to.eql({
				string: ['aString'],
				boolean: ['aBoolean'],
				alias: {
					s: 'aString'
				},
				default: {
					aString: 'foobar'
				}
			});
		});

		it('should handle empty attributes', function() {
			expect(optparser.getAttributes({})).to.eql({
				string: [],
				boolean: [],
				alias: {},
				default: {}
			});
		});
	});

	describe('handleOptions', function() {
		it('should parse empty options', function() {
			var parsed = optparser.handleOptions([], {});
			expect(parsed._).to.eql([]);
		});

		it('should parse general options (no argv)', function() {
			var parsed = optparser.handleOptions([], {
				aString: {
					alias: 's',
					default: 'foobar',
					type: 'string'
				}
			});

			expect(parsed).to.eql({
				_: [],
				aString: 'foobar',
				s: 'foobar'
			});
		});

		it('should parse general options (argv)', function() {
			var parsed = optparser.handleOptions([
				'--aString', 'cat', 'hello'
			], {
				aString: {
					alias: 's',
					default: 'foobar',
					type: 'string'
				}
			});

			expect(parsed).to.eql({
				_: [ 'hello' ],
				aString: 'cat',
				s: 'cat'
			});
		});

		it('should check for required options', function() {
			expect(function() {
				optparser.handleOptions([], {
					aString: { required: true }
				});
			}).to.throw(/Missing required option aString/);
		});
	});

	describe('parseOptions', function() {
		it('should get options from markdown', function() {
			var markdown = [
				'# sample -- A demonstration of the features & formatting',
				'',
				'## SYNOPSIS',
				'',
				'sample [flags] `<first>` `<last>` `[pet]`',
				'',
				'## OPTIONS',
				'',
				'### -f, --flag',
				'A simple boolean flag',
				'',
				'### -n NUM, --number NUM',
				'A simple number flag',
				'',
				'### -s "STRING", --string "STRING"',
				'A simple string flag',
				'',
				'### --anything ANYTHING',
				'A simple string flag',
				'',
				'## BUGS',
				'',
				'GitHub'
			].join('\n');

			expect(optparser.parseOptions(markdown)).to.eql({
				f: { alias: 'flag', type: 'boolean' },
				n: { alias: 'number' },
				s: { alias: 'string', type: 'string' },
				anything: {}
			});
		});

		it('should return an empty object if no markdown was given', function() {
			expect(optparser.parseOptions()).to.eql({});
		});
	});

	describe('parse', function() {

		var markdown = [
			'# sample -- A demonstration of the features & formatting',
			'',
			'## SYNOPSIS',
			'',
			'sample [flags] `<first>` `<last>` `[pet]`',
			'',
			'## OPTIONS',
			'',
			'### -f, --flag',
			'A simple boolean flag',
			'',
			'### -n NUM, --number NUM',
			'A simple number flag',
			'',
			'### -s "STRING", --string "STRING"',
			'A simple string flag',
			'',
			'### --anything ANYTHING',
			'A simple string flag',
			'',
			'## BUGS',
			'',
			'GitHub'
		].join('\n');


		it('should work without arguments', function() {
			var parsed = optparser.parse([], markdown);

			expect(parsed.getValue('flag')).to.equal(false);
			expect(parsed.getValue('f')).to.equal(false);
		});

		it('should take positional and flag values', function() {
			var parsed = optparser.parse([
				'-f',
				'--number', '000123',
				'--string', '000123',
				'one', '123'
			], markdown);

			expect(parsed.getValue('flag')).to.equal(true);
			expect(parsed.getValue('number')).to.equal(123);
			expect(parsed.getValue('string')).to.equal('000123');

			expect(parsed.getValue(0)).to.equal('one');
			expect(parsed.getValue(1)).to.equal(123);
		});

	});

});
