"use strict";
/* global describe */
/* global it */

var main = require('../main')
, path = require('path')
, expect = require('chai').expect;

describe('main', function() {

	var markdownPath = path.join(__dirname, 'files', 'everything.md');

	describe('run', function() {
		it('fail to run when the module has a parent', function(done) {
			var fakeModule = { parent: 'parent' };
			var test = '';
			main.run(fakeModule, function($) {
				test = 'ran';
			});
			setTimeout(function() {
				expect(test).to.equal('');
				done();
			}, 50);
		});

		it('should run when module has no parent', function(done) {
			var fakeModule = { parent: null };
			var test = '';
			main.run(fakeModule, function($) {
				test = 'ran';
			});
			setTimeout(function() {
				expect(test).to.equal('ran');
				done();
			}, 50);
		});

		it('should use the given markdown', function(done) {
			var fakeModule = { parent: null };
			main.run(fakeModule, markdownPath, function($) {
				expect($('default')).to.equal('foo');
				done();
			});
		});

		it('should use the given arguments', function(done) {
			var fakeModule = { parent: null };
			main.run(fakeModule, ['one', '-x', 'yz' ], function($) {
				expect($(0)).to.equal('one');
				expect($('x')).to.equal('yz');
				done();
			});
		});

		it('should use the given arguments and markdown', function(done) {
			var fakeModule = { parent: null };
			main.run(fakeModule, markdownPath, ['one', '-x', 'yz' ], function($) {
				expect($(0)).to.equal('one');
				expect($('x')).to.equal('yz');
				expect($('default')).to.equal('foo');
				done();
			});
		});
	});

});
